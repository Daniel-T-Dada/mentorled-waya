"use client";

import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Plus, Settings, Eye, Trash2 } from "lucide-react";
import { useKid } from "@/contexts/KidContext";
import { CreateKidAccount } from "@/components/modals/CreateKidAccount";

export function KidsManagement() {
    const { kids, isLoadingKids, setActiveKid, getKidDisplayName } = useKid();
    const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);    
    const handleViewAsKid = (kid: any) => {
        setActiveKid(kid);
        const displayName = getKidDisplayName(kid);
        // Could navigate to kid view or show kid perspective
        console.log("Viewing as kid:", displayName);
    };

    if (isLoadingKids) {
        return (
            <Card>
                <CardHeader>
                    <CardTitle>Kids Management</CardTitle>
                </CardHeader>
                <CardContent>
                    <div className="flex items-center justify-center py-8">
                        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
                    </div>
                </CardContent>
            </Card>
        );
    }

    return (
        <>
            <Card>
                <CardHeader className="flex flex-row items-center justify-between">
                    <CardTitle>Kids Management</CardTitle>
                    <Button
                        onClick={() => setIsCreateModalOpen(true)}
                        size="sm"
                        className="flex items-center gap-2"
                    >
                        <Plus className="h-4 w-4" />
                        Add Kid
                    </Button>
                </CardHeader>
                <CardContent>
                    {kids.length === 0 ? (
                        <div className="text-center py-8">
                            <div className="text-muted-foreground mb-4">
                                No kids added yet. Create your first kid account to get started!
                            </div>
                            <Button
                                onClick={() => setIsCreateModalOpen(true)}
                                variant="outline"
                                className="flex items-center gap-2"
                            >
                                <Plus className="h-4 w-4" />
                                Create Kid Account
                            </Button>
                        </div>
                    ) : (
                        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
                            {kids.map((kid) => (
                                <KidCard
                                    key={kid.id}
                                    kid={kid}
                                    onViewAsKid={handleViewAsKid}
                                />
                            ))}
                        </div>
                    )}
                </CardContent>
            </Card>

            <CreateKidAccount
                isOpen={isCreateModalOpen}
                onClose={() => setIsCreateModalOpen(false)}
                onSuccess={(kidData) => {
                    console.log("New kid created:", kidData);
                    setIsCreateModalOpen(false);
                }}
            />
        </>
    );
}

interface KidCardProps {
    kid: any;
    onViewAsKid: (kid: any) => void;
}

function KidCard({ kid, onViewAsKid }: KidCardProps) {
    const { removeKid, getKidDisplayName } = useKid();
    
    const displayName = getKidDisplayName(kid);

    const handleDelete = () => {
        if (confirm(`Are you sure you want to delete ${displayName}'s account?`)) {
            removeKid(kid.id);
            // TODO: Call API to delete kid
        }
    };

    return (
        <Card className="hover:shadow-md transition-shadow">
            <CardContent className="p-4">                <div className="flex items-center gap-3 mb-3">
                    <Avatar className="h-12 w-12">
                        <AvatarImage src={kid.avatar || undefined} />
                        <AvatarFallback>
                            {displayName.slice(0, 2).toUpperCase()}
                        </AvatarFallback>
                    </Avatar>
                    <div className="flex-1">
                        <h3 className="font-medium">{displayName}</h3>
                        <Badge variant="secondary" className="text-xs">
                            Kid Account
                        </Badge>
                    </div>
                </div>

                <div className="text-sm text-muted-foreground mb-3">
                    Created: {new Date(kid.created_at).toLocaleDateString()}
                </div>

                <div className="flex gap-2">
                    <Button
                        variant="outline"
                        size="sm"
                        className="flex-1"
                        onClick={() => onViewAsKid(kid)}
                    >
                        <Eye className="h-3 w-3 mr-1" />
                        View
                    </Button>
                    <Button
                        variant="outline"
                        size="sm"
                        className="px-2"
                    >
                        <Settings className="h-3 w-3" />
                    </Button>
                    <Button
                        variant="outline"
                        size="sm"
                        className="px-2 text-destructive hover:text-destructive"
                        onClick={handleDelete}
                    >
                        <Trash2 className="h-3 w-3" />
                    </Button>
                </div>
            </CardContent>
        </Card>
    );
}
